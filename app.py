from flask import Flask, render_template, request, redirect, url_for, flash, session
from datetime import datetime
import os

# Importar m칩dulos para gera칞칚o de arquivos
from scripts.csv_generator import generate_csv
from scripts.pdf_generator import generate_pdf
from scripts.csv_reader import read_csv_files, get_course_by_id
from scripts.id_manager import get_next_id, get_current_id

app = Flask(__name__)
# Configura칞칚o para produ칞칚o no PythonAnywhere
app.secret_key = os.environ.get('SECRET_KEY', 'ciclo_carioca_v4_pythonanywhere_2025')

# Configura칞칚o do template folder
app.template_folder = 'templates'
app.static_folder = 'static'

# Simula칞칚o de banco de dados para cursos
COURSES_DB = []

# Dados de exemplo para 칩rg칚os
ORGAOS = [
    'Secretaria Municipal de Educa칞칚o (SME)',
    'Secretaria Municipal de Sa칰de (SMS)',
    'Secretaria Municipal de Ci칡ncia e Tecnologia (SMCT)',
    'Secretaria Municipal de Trabalho e Emprego (SMTE)',
    'Secretaria Municipal de Desenvolvimento Urbano (SMDU)',
    'Secretaria Municipal de Meio Ambiente (SMAC)',
    'Secretaria Municipal de Cultura (SMC)',
    'Secretaria Municipal de Assist칡ncia Social (SMAS)',
    'Secretaria Municipal de Fazenda (SMF)',
    'Secretaria Municipal de Transportes (SMTR)',
    'Instituto de Vigil칙ncia Sanit치ria (IVISA)',
    'Empresa Municipal de Vigil칙ncia (EMV)',
    'Funda칞칚o Planet치rio da Cidade do Rio de Janeiro',
    'Instituto Pereira Passos (IPP)',
    'Empresa Municipal de Inform치tica (IPLANRIO)'
]

@app.route('/')
def index():
    """P치gina inicial com formul치rio de cria칞칚o de curso"""
    # Limpar mensagens flash ao acessar a p치gina inicial
    # Isso evita que mensagens antigas apare칞am no PythonAnywhere
    if 'pythonanywhere' in request.host:
        session.pop('_flashes', None)
    
    return render_template('course_form.html', 
                         orgaos=ORGAOS)

@app.route('/create_course', methods=['POST'])
def create_course():
    """Processar cria칞칚o de novo curso"""
    try:
        # Capturar dados do formul치rio
        inicio_data = request.form.get('inicio_inscricoes_data')
        inicio_hora = request.form.get('inicio_inscricoes_hora')
        fim_data = request.form.get('fim_inscricoes_data')
        fim_hora = request.form.get('fim_inscricoes_hora')
        
        # Obter pr칩ximo ID dispon칤vel
        next_id = get_next_id()
        
        course_data = {
            'id': next_id,
            'titulo': request.form.get('titulo'),
            'descricao': request.form.get('descricao'),
            'inicio_inscricoes': f'{inicio_data.replace("-", "/")} {inicio_hora}' if inicio_data and inicio_hora else '',
            'fim_inscricoes': f'{fim_data.replace("-", "/")} {fim_hora}' if fim_data and fim_hora else '',
            'orgao': request.form.get('orgao'),
            'tema': request.form.get('tema'),
            'modalidade': request.form.get('modalidade'),
            'carga_horaria': request.form.get('carga_horaria'),
            'publico_alvo': request.form.get('publico_alvo'),
            'created_at': datetime.now().strftime('%d-%m-%Y %H:%M:%S')
        }
        
        # Adicionar ao "banco de dados"
        COURSES_DB.append(course_data)
        
        # Garantir que os diret칩rios existam
        csv_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'CSV')
        pdf_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'PDF')
        
        if not os.path.exists(csv_dir):
            os.makedirs(csv_dir)
        if not os.path.exists(pdf_dir):
            os.makedirs(pdf_dir)
            
        # Gerar arquivos CSV e PDF
        try:
            print(f"Tentando gerar arquivo CSV para o curso {course_data['id']}")
            print(f"Diret칩rio de trabalho atual: {os.getcwd()}")
            print(f"Diret칩rio CSV: {csv_dir}")
            print(f"Diret칩rio PDF: {pdf_dir}")
            print(f"Verificando se os diret칩rios existem: CSV={os.path.exists(csv_dir)}, PDF={os.path.exists(pdf_dir)}")
            
            csv_path = generate_csv(course_data)
            print(f"CSV gerado com sucesso: {csv_path}")
            print(f"Arquivo CSV existe? {os.path.exists(csv_path)}")
            
            print(f"Tentando gerar arquivo PDF para o curso {course_data['id']}")
            pdf_path = generate_pdf(course_data)
            print(f"PDF gerado com sucesso: {pdf_path}")
            print(f"Arquivo PDF existe? {os.path.exists(pdf_path)}")
            
            flash(f'Arquivos gerados: CSV e PDF', 'info')
        except Exception as file_error:
            print(f"ERRO ao gerar arquivos: {str(file_error)}")
            import traceback
            print(traceback.format_exc())
            flash(f'Erro ao gerar arquivos: {str(file_error)}', 'warning')
        
        flash('Curso criado com sucesso!', 'success')
        return redirect(url_for('course_success', course_id=course_data['id']))
        
    except Exception as e:
        flash(f'Erro ao criar curso: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/course/<int:course_id>')
def course_success(course_id):
    """P치gina de sucesso ap칩s cria칞칚o do curso"""
    # Buscar curso pelo ID nos arquivos CSV
    course = get_course_by_id(course_id)
    if not course:
        # Tentar buscar no banco de dados em mem칩ria
        course = next((c for c in COURSES_DB if c['id'] == course_id), None)
        if not course:
            flash('Curso n칚o encontrado', 'error')
            return redirect(url_for('index'))
    
    # Verificar se existem arquivos gerados para este curso
    csv_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'CSV')
    pdf_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'PDF')
    
    # Garantir que os diret칩rios existam
    if not os.path.exists(csv_dir):
        os.makedirs(csv_dir)
    if not os.path.exists(pdf_dir):
        os.makedirs(pdf_dir)
        
    csv_files = [f for f in os.listdir(csv_dir) if f.startswith(f"curso_{course_id}_")]
    pdf_files = [f for f in os.listdir(pdf_dir) if f.startswith(f"curso_{course_id}_")]
    
    # Obter os arquivos mais recentes (se existirem)
    latest_csv = csv_files[-1] if csv_files else None
    latest_pdf = pdf_files[-1] if pdf_files else None
    
    return render_template('course_success.html', 
                           course=course, 
                           csv_file=latest_csv, 
                           pdf_file=latest_pdf)

@app.route('/courses')
def list_courses():
    """Listar todos os cursos criados"""
    # Limpar mensagens flash ao acessar a lista de cursos
    # Isso evita que mensagens antigas apare칞am no PythonAnywhere
    if 'pythonanywhere' in request.host:
        session.pop('_flashes', None)
    
    # Ler todos os cursos dos arquivos CSV
    courses = read_csv_files()
    return render_template('course_list.html', courses=courses)

if __name__ == '__main__':
    print("\n" + "="*50)
    print("游꿉 WebApp v4 - Ciclo Carioca (PythonAnywhere)")
    print("游늶 Formul치rio de Cria칞칚o de Cursos")
    print("游깷 Rodando em modo de produ칞칚o")
    print("="*50 + "\n")
    
    # Configura칞칚o para desenvolvimento local
    app.run(debug=False, host='0.0.0.0', port=5001)

# Configura칞칚o para PythonAnywhere
# Esta aplica칞칚o ser치 importada pelo arquivo WSGI
application = app

# Middleware para verificar e limpar mensagens flash no PythonAnywhere
@app.before_request
def check_pythonanywhere():
    """Verificar se estamos no PythonAnywhere e limpar mensagens flash"""
    if request.host and 'pythonanywhere' in request.host:
        # Limpar mensagens flash em todas as requisi칞칫es no PythonAnywhere
        if '_flashes' in session:
            session.pop('_flashes', None)